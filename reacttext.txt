                   ******Assignment Chapter:2******


1.What is `NPM`?
=> npm is two things: first and foremost, it is an online repository for the publishing of
   open-source Node.js projects; second, it is a command-line utility for interacting with 
   said repository that aids in package installation, version management, and dependency 
   management. A plethora of Node.js libraries and applications are published on npm, and 
   many more are added every day. These applications can be searched for on 
   https://www.npmjs.com/. Once you have a package you want to install, it can be installed
   with a single command-line command.

2.What is `Parcel/Webpack`? Why do we need it?
=> Parcel is the bundlers used mostly for JavaScript or Typescript code that helps you to 
   minify, clean, and make your code compact so that it becomes easier to send a request or 
   receive the response from the server when it usually takes you to transfer multiple files
   without using any bundler for loading the page of your application. Both of these bundlers
   substantially reduce the time it takes for the transfer of data and files to the server 
   from the application. Along with that both bundlers parcel and webpack remove the 
   unnecessary comments, new lines, any kind of block delimiters, and white spaces while the 
   functionality of the code remains unchanged.

3.What is `.parcel-cache`?
=> cache folder (or . parcel-cache in parcel v2) stores information about your project when
   parcel builds it, so that when it rebuilds, it doesn't have to re-parse and re-analyze 
   everything from scratch. It's a key reason why parcel can be so fast in development mode.

4.what is 'npx'?
=> The npx stands for Node Package Execute and it comes with the npm, when you installed npm 
   above 5.2.0 version then automatically npx will installed. It is an npm package runner that
   can execute any package that you want from the npm registry without even installing that 
   package.

5.What is difference between `dependencies` vs `devDependencies`?
=> The difference between these two, is that devDependencies are modules which are only 
   required during development, while dependencies are modules which are also required at 
   runtime. To save a dependency as a devDependency on installation we need to do an npm 
   install --save-dev , instead of just an npm install --save.

6.What is Tree Shaking?
=> Tree shaking is a term commonly used within a JavaScript context to describe the removal
   of dead code.It relies on the import and export statements to detect if code modules are 
   exported and imported for use between JavaScript files.

7.What is Hot Module Replacement?
=> Hot Module Replacement (HMR) exchanges, adds, or removes modules while an application is 
   running, without a full reload. This can significantly speed up development in a few 
   ways: Retain application state which is lost during a full reload.

8.List down your favorite 5 superpowers of Parcel and describe any 3 of them in your
  own words.
=>favorite 5 superpowers of parcel:
  1--> Hot reloading
  2--> Development target
  3--> Caching
  4--> API proxy
  5--> File Watcher

  3 of my favorite:

  1)Hot reloading
  => As you make changes to your code, Parcel automatically rebuilds the changed files and updates 
     your app in the browser.Parcel fully reloads the page, but in some cases it may perform Hot 
     Module Replacement (HMR).

     CSS changes are automatically applied via HMR with no page reload necessary. This is also true
     when using a framework with HMR support built in, like React (via Fast Refresh), and Vue.

     If youâ€™re not using a framework, you can opt into HMR using the module.hot API.module.hot is 
     only available in development, so you'll need to check that it exists before using it.


  2)API proxy
  => To better emulate the actual production environment when developing web apps, you can specify paths
     that should be proxied to another server  in a .proxyrc, .proxyrc.json or .proxyrc.js file.

     .proxyrc / .proxyrc.json:

      --> In this JSON file, you specify an object where every key is a pattern against which the URL is 
          matched and the value is a http-proxy-middleware options object:
              Example:     {
                            "/api": {
                         "target": "http://localhost:8000/",
                          "pathRewrite": {
                          "^/api": ""
                                         }
                                   }
                    }
          This example would cause http://localhost:1234/api/endpoint to be proxied to 
          http://localhost:8000/endpoint.        


  3)File watcher  
  => To support an optimal caching and development experience Parcel utilizes a very fast 
     watcher written in C++ that integrates with low-level file watching functionality of each
     operating system. Using this watcher Parcel watches every file in your project root. Based
     on events and metadata from these files, Parcel determines which files need to be rebuilt.       
                 

9.What is `.gitignore`? What should we add and not add into it?
=> The .gitignore file is a text file that tells Git which files or folders to ignore in a project.
   To create a local .gitignore file, create a text file and name it .gitignore. Then edit this file 
   as needed. Each new line should list an additional file or folder that you want Git to ignore.            

10.What is the difference between `package.json` and `package-lock.json`?
=>  ------------------------------------------------------------------------------------------
             package.json                  |         package.lock.json
    ------------------------------------------------------------------------------------------
      * It contains basic information      |    * It describes the exact tree that was
        about the project.                 |      generated to allow subsequent installs to
                                           |      have the identical tree.
                                           |
      * It is mandatory for every project. |    * It is automatically generated for those
                                           |      operations where npm modifies either
                                           |      node_modules tree or package.json.
                                           |
      * It records important metadata      |    * It allows future devs to install the same
        about the project.                 |      dependencies in the project. 
                                           |
      * It contains information such as    |    * It contains the name, dependencies, and
        name, description, author, script, |      locked version of the project. 
        and dependencies.                  |                   

11.Why should I not modify `package-lock.json`?
=> The `package-lock. json` file was introduced in npm version 5 to solve this problem. It is a generated
   file and is not designed to be manually edited.

   The reason package-lock. json may change automatically when you run npm install is because NPM is 
   updating the package-lock. json file to accurately reflect all the dependencies it has downloaded 
   since it may have gotten more up-to-date versions of some of them. Once NPM updates the package-lock.

12.What is `node_modules` ? Is it a good idea to push that on git?
=> You can think of the node_modules folder like a cache for the external modules that your project 
   depends upon. When you npm install them, they are downloaded from the web and copied into the 
   node_modules folder and Node. js is trained to look for them there when you import them.
   
   No, It's not good to commit the node_modules folder in Git.
   The node_modules folder has a massive size (up to Gigabytes). 
   It is easy to recreate the node_modules folder via packages. json. 
   It is unnecessary to commit code that you didn't write (in most cases).

13.What is the `dist` folder?
=> The /dist stands for distributable. The /dist folder contains the minimized version of the source code. 
   The code present in the /dist folder is actually the code which is used on production web applications.   

14.What is `browserlists`?
=>Browserslist is a tool that allows specifying which browsers should be supported in your frontend 
  app by specifying "queries" in a config file. It's used by frameworks/libraries such as React, 
  Angular and Vue, but it's not limited to them.   

